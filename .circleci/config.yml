%YAML 1.2
---

version: 2.1

anchors:
  - &test_device "iPhone 14"
  - &test_device_os "16.2"
  - &clean_before_build true
  - &default_executor
    macos:
      xcode: "14.2.0"

env:
  global:
    - LC_CTYPE=en_US.UTF-8
    - LANG=en_US.UTF-8

commands:
  fetch-pod-specs:
    steps:
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf

  pod-install:
    parameters:
      path:
        type: string
    steps:
      # - fetch-pod-specs # Fetch the podspec repo changes first to be sure to always get the latest pods
      - run:
          command: |
            cd <<parameters.path>>
            pod install --verbose

  test_main_project:
    parameters:
        simulator:
          type: string
          default: *test_device
        os_version:
          type: string
          default: *test_device_os
    steps:
      - checkout
      - test_project_and_store_results:
          simulator: <<parameters.simulator>>
          os_version: <<parameters.os_version>>

  test_example_project:
    parameters:
      path: # We need to pass a path here because the example projects are in a sub folder of the project
        type: string
    steps:
      - checkout
      - pod-install:
          path: <<parameters.path>>
      - test_workspace_and_store_results:
          workspace: "Example.xcworkspace"
          scheme: "Example"
          path: <<parameters.path>>

  # We introduced two separate commands for projects and workspaces because we didn't find a generic and non-confusing way to introduce
  # a condition to only pass either the project or the workspace environment argument to the test output
  test_project_and_store_results:
    description: "Builds and tests a project and then stores the results of the tests as artifacts and test results report"
    parameters:
      simulator:
        type: string
        default: *test_device
      os_version:
        type: string
        default: *test_device_os
    steps:
      - run:
          name: Run tests on iOS <<parameters.os_version>>
          command: |
            xcodebuild -scheme Flow \
            -project Flow.xcodeproj \
            -destination "platform=iOS Simulator,OS=<<parameters.os_version>>,name=<<parameters.simulator>>" \
             build test \
             | xcpretty --report junit --output 'test_output/report.junit'
      - store_artifacts: # This will by default store an html and junit file as artifacts (See "Artifacts" tab in CircleCI report)
          path: test_output # test_output is the default temporary folder for test output
          destination: test_output # This will create a sub structure in the artifacts section in CircleCI
      - store_test_results: # This will store the test results so you can then see them in the "Test Summary" tab in CircleCI report
          path: test_output

  test_workspace_and_store_results:
    description: "Builds and tests a workspace and then stores the results of the tests as artifacts and test results report"
    parameters:
      workspace:
        type: string
      scheme:
        type: string
      path:
        type: string
      simulator:
        type: string
        default: *test_device
      os_version:
        type: string
        default: *test_device_os
    steps:
      - run:
          name: Run examples
          command: |
            cd <<parameters.path>>
            xcodebuild -workspace <<parameters.workspace>> \
            -scheme <<parameters.scheme>> \
            -destination "platform=iOS Simulator,OS=<<parameters.os_version>>,name=<<parameters.simulator>>" \
             build test \
             | xcpretty --report junit --output 'test_output/report.junit'
      - store_artifacts: # This will by default store an html and junit file as artifacts (See "Artifacts" tab in CircleCI report)
          path: <<parameters.path>>/test_output # test_output is the default temporary folder for test output
          destination: test_output # This will create a sub structure in the artifacts section in CircleCI
      - store_test_results: # This will store the test results so you can then see them in the "Test Summary" tab in CircleCI report
          path: <<parameters.path>>/test_output

jobs:
  swiftlint:
    parameters:
      version:
        type: string
    <<: *default_executor
    steps:
      - attach_workspace:
          at: .
      - checkout
      - run:
          name: Install SwiftLint(<< parameters.version >>)
          command: |
            curl -L -k -o /Users/distiller/Downloads/SwiftLint.pkg https://github.com/realm/SwiftLint/releases/download/<< parameters.version >>/SwiftLint.pkg
            sudo installer -pkg /Users/distiller/Downloads/SwiftLint.pkg -target /
      # Run SwiftLint.
      - run:
          name: Lint Codebase
          command: |
            swiftlint version && swiftlint --strict --reporter html > swiftlint.html
      - store_artifacts:
          path: swiftlint.html
          destination: swiftlint.html
      - store_test_results:
          path: swiftlint.html

  test-xcode13-ios15:
    macos:
      xcode: "13.0.0"
    steps:
      - test_main_project:
          simulator: "iPhone 13"
          os_version: "15.0"

  test-xcode14-ios16:
    <<: *default_executor
    steps:
      - test_main_project

  test-example-login:
    <<: *default_executor
    steps:
      - test_example_project:
          path: Examples/login

workflows:
  version: 2.1
  build-and-test:
    jobs:
      - swiftlint:
          version: 0.49.1
      - test-xcode13-ios15
      - test-xcode14-ios16
      - test-example-login

